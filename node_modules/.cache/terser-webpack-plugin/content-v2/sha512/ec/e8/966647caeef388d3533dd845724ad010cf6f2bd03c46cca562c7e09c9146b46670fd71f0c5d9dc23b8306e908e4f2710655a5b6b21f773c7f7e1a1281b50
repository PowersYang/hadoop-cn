{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{211:function(e,a,r){\"use strict\";r.r(a);var o=r(0),i=Object(o.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[r(\"h1\",{attrs:{id:\"hadoop-archives-guide\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hadoop-archives-guide\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Hadoop Archives Guide\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"overview\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#overview\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Overview\")]),e._v(\" \"),r(\"p\",[e._v(\"Hadoop archives are special format archives. A Hadoop archive maps to a file system directory. A Hadoop archive always has a \"),r(\"em\",[e._v(\".har extension. A Hadoop archive directory contains metadata (in the form of _index and _masterindex) and data (part-\")]),e._v(\") files. The _index file contains the name of the files that are part of the archive and the location within the part files.\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"how-to-create-an-archive\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#how-to-create-an-archive\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" How to Create an Archive\")]),e._v(\" \"),r(\"p\",[e._v(\"Usage: hadoop archive -archiveName name -p \"),r(\"parent\",[e._v(\" [-r \"),r(\"replication\",{attrs:{factor:\"\"}},[e._v(\"] \"),r(\"src\",[e._v(\"* \"),r(\"dest\")],1)],1)],1)],1),e._v(\" \"),r(\"p\",[e._v(\"-archiveName is the name of the archive you would like to create. An example would be foo.har. The name should have a *.har extension. The parent argument is to specify the relative path to which the files should be archived to. Example would be :\")]),e._v(\" \"),r(\"p\",[e._v(\"-p /foo/bar a/b/c e/f/g\")]),e._v(\" \"),r(\"p\",[e._v(\"Here /foo/bar is the parent path and a/b/c, e/f/g are relative paths to parent. Note that this is a Map/Reduce job that creates the archives. You would need a map reduce cluster to run this. For a detailed example the later sections.\")]),e._v(\" \"),r(\"p\",[e._v(\"-r indicates the desired replication factor; if this optional argument is not specified, a replication factor of 3 will be used.\")]),e._v(\" \"),r(\"p\",[e._v(\"If you just want to archive a single directory /foo/bar then you can just use\")]),e._v(\" \"),r(\"p\",[e._v(\"hadoop archive -archiveName zoo.har -p /foo/bar -r 3 /outputdir\")]),e._v(\" \"),r(\"p\",[e._v(\"If you specify source files that are in an encryption zone, they will be decrypted and written into the archive. If the har file is not located in an encryption zone, then they will be stored in clear (decrypted) form. If the har file is located in an encryption zone they will stored in encrypted form.\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"how-to-look-up-files-in-archives\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#how-to-look-up-files-in-archives\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" How to Look Up Files in Archives\")]),e._v(\" \"),r(\"p\",[e._v(\"The archive exposes itself as a file system layer. So all the fs shell commands in the archives work but with a different URI. Also, note that archives are immutable. So, rename’s, deletes and creates return an error. URI for Hadoop Archives is\")]),e._v(\" \"),r(\"p\",[e._v(\"har://scheme-hostname:port/archivepath/fileinarchive\")]),e._v(\" \"),r(\"p\",[e._v(\"If no scheme is provided it assumes the underlying filesystem. In that case the URI would look like\")]),e._v(\" \"),r(\"p\",[e._v(\"har:///archivepath/fileinarchive\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"how-to-unarchive-an-archive\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#how-to-unarchive-an-archive\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" How to Unarchive an Archive\")]),e._v(\" \"),r(\"p\",[e._v(\"Since all the fs shell commands in the archives work transparently, unarchiving is just a matter of copying.\")]),e._v(\" \"),r(\"p\",[e._v(\"To unarchive sequentially:\")]),e._v(\" \"),r(\"p\",[e._v(\"hdfs dfs -cp har:///user/zoo/foo.har/dir1 hdfs:/user/zoo/newdir\")]),e._v(\" \"),r(\"p\",[e._v(\"To unarchive in parallel, use DistCp:\")]),e._v(\" \"),r(\"p\",[e._v(\"hadoop distcp har:///user/zoo/foo.har/dir1 hdfs:/user/zoo/newdir\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"archives-examples\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#archives-examples\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Archives Examples\")]),e._v(\" \"),r(\"h3\",{attrs:{id:\"creating-an-archive\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#creating-an-archive\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Creating an Archive\")]),e._v(\" \"),r(\"p\",[e._v(\"hadoop archive -archiveName foo.har -p /user/hadoop -r 3 dir1 dir2 /user/zoo\")]),e._v(\" \"),r(\"p\",[e._v(\"The above example is creating an archive using /user/hadoop as the relative archive directory. The directories /user/hadoop/dir1 and /user/hadoop/dir2 will be archived in the following file system directory – /user/zoo/foo.har. Archiving does not delete the input files. If you want to delete the input files after creating the archives (to reduce namespace), you will have to do it on your own. In this example, because -r 3 is specified, a replication factor of 3 will be used.\")]),e._v(\" \"),r(\"h3\",{attrs:{id:\"looking-up-files\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#looking-up-files\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Looking Up Files\")]),e._v(\" \"),r(\"p\",[e._v(\"Looking up files in hadoop archives is as easy as doing an ls on the filesystem. After you have archived the directories /user/hadoop/dir1 and /user/hadoop/dir2 as in the example above, to see all the files in the archives you can just run:\")]),e._v(\" \"),r(\"p\",[e._v(\"hdfs dfs -ls -R har:///user/zoo/foo.har/\")]),e._v(\" \"),r(\"p\",[e._v(\"To understand the significance of the -p argument, lets go through the above example again. If you just do an ls (not lsr) on the hadoop archive using\")]),e._v(\" \"),r(\"p\",[e._v(\"hdfs dfs -ls har:///user/zoo/foo.har\")]),e._v(\" \"),r(\"p\",[e._v(\"The output should be:\")]),e._v(\" \"),r(\"pre\",[r(\"code\",[e._v(\"har:///user/zoo/foo.har/dir1\\nhar:///user/zoo/foo.har/dir2\\n\")])]),e._v(\" \"),r(\"p\",[e._v(\"As you can recall the archives were created with the following command\")]),e._v(\" \"),r(\"p\",[e._v(\"hadoop archive -archiveName foo.har -p /user/hadoop dir1 dir2 /user/zoo\")]),e._v(\" \"),r(\"p\",[e._v(\"If we were to change the command to:\")]),e._v(\" \"),r(\"p\",[e._v(\"hadoop archive -archiveName foo.har -p /user/ hadoop/dir1 hadoop/dir2 /user/zoo\")]),e._v(\" \"),r(\"p\",[e._v(\"then a ls on the hadoop archive using\")]),e._v(\" \"),r(\"p\",[e._v(\"hdfs dfs -ls har:///user/zoo/foo.har\")]),e._v(\" \"),r(\"p\",[e._v(\"would give you\")]),e._v(\" \"),r(\"pre\",[r(\"code\",[e._v(\"har:///user/zoo/foo.har/hadoop/dir1\\nhar:///user/zoo/foo.har/hadoop/dir2\\n\")])]),e._v(\" \"),r(\"p\",[e._v(\"Notice that the archived files have been archived relative to /user/ rather than /user/hadoop.\")]),e._v(\" \"),r(\"h2\",{attrs:{id:\"hadoop-archives-and-mapreduce\"}},[r(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#hadoop-archives-and-mapreduce\",\"aria-hidden\":\"true\"}},[e._v(\"#\")]),e._v(\" Hadoop Archives and MapReduce\")]),e._v(\" \"),r(\"p\",[e._v(\"Using Hadoop Archives in MapReduce is as easy as specifying a different input filesystem than the default file system. If you have a hadoop archive stored in HDFS in /user/zoo/foo.har then for using this archive for MapReduce input, all you need is to specify the input directory as \"),r(\"a\",{attrs:{href:\"har:///user/zoo/foo.har\"}},[e._v(\"har:///user/zoo/foo.har\")]),e._v(\". Since Hadoop Archives is exposed as a file system MapReduce will be able to use all the logical input files in Hadoop Archives as input.\")])])}),[],!1,null,null,null);a.default=i.exports}}]);","extractedComments":[]}